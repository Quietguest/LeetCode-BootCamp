234. Palindrome Linked List

class Solution(object):
    def isPalindrome(self, head):
        """
        :type head: Optional[ListNode]
        :rtype: bool
        """
        # Using fast and slow pointers to find the mid point
        slow, fast = head, head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        # Reversing the other half of the link list
        prev = None
        while slow:
            temp = slow.next
            slow.next = prev
            prev = slow
            slow = temp
        # Judging whether it is the same
        left, right = head, prev
        while left and right:
            if left.val != right.val:
                return False
            left = left.next
            right = right.next
        
        return True

143. Reorder List

class Solution(object):
    def reorderList(self, head):
        """
        :type head: Optional[ListNode]
        :rtype: None Do not return anything, modify head in-place instead.
        """
        slow, fast = head, head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        
        prev = None
        half_head = slow.next
        slow.next = None # Cut the link list into 2 halfs
        while half_head: # Reversing
            temp = half_head.next
            half_head.next = prev
            prev = half_head
            half_head = temp
        
        first = head
        second = prev
        while second: # Inserting the second half to the first half
            temp1 = first.next
            temp2 = second.next

            first.next = second
            second.next = temp1

            first = temp1
            second = temp2

73. Set Matrix Zeroes

class Solution(object):
    def setZeroes(self, matrix):
        """
        :type matrix: List[List[int]]
        :rtype: None Do not return anything, modify matrix in-place instead.
        """
        m, n = len(matrix), len(matrix[0])
        first_row = False
        first_column = False
        # Judging whether the first row and column have 0.
        for i in range(m):
            if matrix[i][0] == 0:
                first_column = True
                break
        
        for j in range(n):
            if matrix[0][j] == 0:
                first_row = True
                break
        # Traversal whole matrix to find 0 item and set the corresponding first row and first column 0.
        for i in range(1,m):
            for j in range(1,n):
                if matrix[i][j] == 0:
                    matrix[i][0] = 0
                    matrix[0][j] = 0
        # According the first row and first column 0 items to set other 0s.
        for i in range(1,m):
            for j in range(1,n):
                if matrix[i][0] == 0 or matrix[0][j] == 0:
                    matrix[i][j] = 0
        # If first row and first column have 0s set them to 0.
        if first_row == True:
            for j in range(n):
                matrix[0][j] = 0
        
        if first_column == True:
            for i in range(m):
                matrix[i][0] = 0
